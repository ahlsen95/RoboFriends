{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/Header.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","robots","console","log","map","user","i","components_Card","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","Header","nextProps","nextState","Component","App","this","onRequestRobots","_this$props","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","components_Header","components_SearchBox","components_Scroll","components_CardList","connect","state","searchRobots","requestRobots","error","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","initialStateSearch","initialStateRobots","rootReducer","combineReducers","arguments","length","undefined","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b52d43cd.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name, email, id}) => {\r\n  return (\r\n    <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n      <img alt='robots' src={`https://robohash.org/${id}?200x200`} />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n  console.log('CardList');\r\n  return (\r\n    <div>\r\n      {\r\n        robots.map((user,i) => {\r\n          return (\r\n            <Card\r\n              key={i}\r\n              id={robots[i].id}\r\n              name ={robots[i].name}\r\n              email={robots[i].email}\r\n              />\r\n          );\r\n        })\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange}) => {\r\n  console.log('SearchBox');\r\n  return (\r\n    <div className = 'pa2'>\r\n      <input\r\n        className ='pa3 ba b--green bg-lightest-blue'\r\n        type ='search'\r\n        placeholder ='search robots'\r\n        onChange ={searchChange}\r\n        />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  return (<div style={{\r\n      overflowY: 'scroll',\r\n      border: '2px solid black',\r\n      height: '800px'\r\n    }}>\r\n    {props.children}\r\n  </div>);\r\n};\r\n\r\nexport default Scroll\r\n","import React, { Component } from 'react';\r\n\r\n\r\nclass Header extends Component {\r\n\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n\r\n    return false;\r\n  }\r\n  render(){\r\n    console.log('Header');\r\n    return (\r\n      <div>\r\n        <h1 className='f1'>RoboFriends</h1>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React, {Component} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport './App.css';\r\nimport Header from '../components/Header';\r\n\r\nimport { setSearchField, requestRobots } from '../actions'\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    searchField: state.searchRobots.searchField,\r\n    robots: state.requestRobots.robots,\r\n    isPending: state.requestRobots.isPending,\r\n    error: state.requestRobots.error\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots())\r\n  }\r\n}\r\n\r\nclass App extends Component {\r\n\r\n  componentDidMount() {\r\n    this.props.onRequestRobots();\r\n  }\r\n\r\n  render() {\r\n    const { searchField, onSearchChange, robots, isPending} = this.props;\r\n    const filteredRobots = robots.filter(robot => {\r\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n    })\r\n    return isPending ?\r\n     <h1>Loading</h1> :\r\n       (<div className='tc'>\r\n        <Header />\r\n        <SearchBox searchChange={onSearchChange}/>\r\n        <Scroll>\r\n          <CardList robots={filteredRobots}/>\r\n        </Scroll>\r\n      </div>);\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n} from './constants.js'\r\n\r\nexport const setSearchField = (text) => ({\r\n  type: CHANGE_SEARCH_FIELD,\r\n  payload: text\r\n})\r\n\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n  fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response => response.json())\r\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\r\n}\r\n","//Searchfield\r\nexport const CHANGE_SEARCH_FIELD ='CHANGE_SEARCH_FIELD'\r\n\r\n//Ajax call\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n} from './constants.js'\r\n\r\n\r\n// Search\r\nconst initialStateSearch = {\r\n  searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n  switch(action.type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n      return Object.assign({}, state, {searchField: action.payload});\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n// Robot request\r\nconst initialStateRobots =  {\r\n  isPending: false,\r\n  robots: [],\r\n  error: ''\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n  switch(action.type) {\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return Object.assign({}, state, { isPending: true});\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return Object.assign({}, state, { robots: action.payload, isPending: false});\r\n    case REQUEST_ROBOTS_FAILED:\r\n      return Object.assign({}, state, { error: action.payload, isPending: false});\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\n//import { createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots, requestRobots } from './reducers';\nimport \"tachyons\";\n\n//const logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\nReactDOM.render(\n                <Provider store={store}>\n                  <App />\n                </Provider>, document.getElementById('root')\n              );\n\n  // If you want your app to work offline and load faster, you can change\n  // unregister() to register() below. Note this comes with some pitfalls.\n  // Learn more about service workers: http://bit.ly/CRA-PWA\n  serviceWorker.register();\n"],"sourceRoot":""}